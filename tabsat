#!/bin/bash

USER_HOME=$HOME
BASE_DIR="${USER_HOME}/tabsat"
FINAL_TABLE="${BASE_DIR}/tools/ait/create_final_table.py"
R_PLOTTING="${BASE_DIR}/tools/R/lollipop.R"
METHYL_SUBPOP="${BASE_DIR}/tools/MethylSubpop/subpopulations.sh"
BISMARK_RUN="${BASE_DIR}/02_meth_pipe.sh"
JSON_CREATOR="${BASE_DIR}/tools/ait/prepare_json.py"

usage () {
    echo -e "\nUsage: $0 -t targetlist -l <DIR|NONDIR> -d inputdirectory [with list of files] -a aligner <bowtie2|tmap> -m min_read_length -q min_read_qual -p percent_target_for_patterns -r min_number_reads_cpg -o outputdirectory [files] \n"
}


############# Filtering of parameters
while getopts ":ht:l:d:o:a:m:q:p:r:" option; do
	case "$option" in
		h) usage
		   exit 0 ;;
		t) TARGET_LIST=${OPTARG};;
		l) BS_SEQ=${OPTARG};;
		d) INPUTDIR=${OPTARG};;
		o) OUTPUT_DIR=${OPTARG};;
		a) ALIGNER=${OPTARG};;
		m) MIN_READ_LEN=${OPTARG};;
		q) MIN_READ_QUAL=${OPTARG};;
		p) PERCENT_TARGET=${OPTARG};;
		r) READ_CUTOFF=${OPTARG};;
		?) echo "Error: unknown option -$OPTARG" 
			usage
			exit 1;;
	esac
done 
shift $(( OPTIND - 1 ))    

echo -e "\n"
echo -e "##########################"
echo -e "##  Welcome to TABSAT!  ##"
echo -e "##########################\n"




if [[ $BS_SEQ != "DIR" && $BS_SEQ != "NONDIR" ]]; then
  echo "Error: You need to specify the BS-Seq library using <dir|nondir> for directional or nondirectional"
  usage
  exit 1
fi

if [ -z "$TARGET_LIST" ]; then
  echo "Error: You need to specify a Target file using -t"
  usage
  exit 1
fi

if [ -z "$ALIGNER" ]; then
  echo "Default aligner for bismark: tmap"
  ALIGNER="tmap"
fi

if [ -z "${MIN_READ_QUAL}" ]; then
  echo "Minimum read qual not specified. Setting it to 20"
  MIN_READ_QUAL="20"
fi
echo "MIN_READ_QUAL: ${MIN_READ_QUAL}"

if [ -z "$MIN_READ_LEN" ]; then
  echo "Minimum read length not specified. Setting it to 8"
  MIN_READ_LEN="8"
fi
echo "MIN_READ_LEN: ${MIN_READ_LEN}"

if [ -z "$PERCENT_TARGET" ]; then
  echo "Percent Target not specified. Setting it to 0.8"
  PERCENT_TARGET="0.8"
fi
echo "PERCENT_TARGET: ${PERCENT_TARGET}"

if [ -z "$READ_CUTOFF" ]; then
  echo "Read cutoff not specified. Setting it to 0"
  READ_CUTOFF="0"
fi
echo "READ_CUTOFF: ${READ_CUTOFF}"


if [[ -z "$INPUTDIR" && -z "$@" ]]; then
  echo "Error: You have to specify either a directory name using -d or pass a list of files"
  echo "Example: "
  usage
  exit 1
fi

if [[ ! -d "$INPUTDIR" &&  -z "$@" ]]; then
  echo "Error: the dir_name argument must be a directory or pass a list of files"
  exit 1
fi

if [ -z "$OUTPUT_DIR" ]; then
  echo "Error: You need to specify an Output directory using -o"
  usage
  exit 1
fi







############# Create directory for final table and R plots
if [ -p $INPUTDIR ]
then
	FILEARRAY="$@"
else
	FILEARRAY="$INPUTDIR/*.fastq" #$@
fi


## Create output dir
mkdir -p $OUTPUT_DIR


COV_DIR="$OUTPUT_DIR"/COVERAGE_"$BS_SEQ"_"$ALIGNER"
echo "Used coverage directory: $COV_DIR"
mkdir -p $COV_DIR


############# Create directory for methyl subpopulations
POP_DIR="${COV_DIR}/MethylSubpopulations"
mkdir -p $POP_DIR


############## Run bismark for all input files

## CD into the output dir
cd ${OUTPUT_DIR}

## Create qc dir
mkdir qc

## Create idxstats dir
mkdir idxstats

echo -e "\n\n"

base_pwd_dir=`pwd`

for file in $FILEARRAY
do
    current="$(basename "$file" .fastq)"
    current_dir="${base_pwd_dir}/${current}_${BS_SEQ}_${ALIGNER}"
    echo "Basename: ${current}"
    echo "current_dir: ${current_dir}"
    echo -e "\nRunning Bismark... \n"
    bash ${BISMARK_RUN} ${file} ${current_dir} $TARGET_LIST $BS_SEQ $ALIGNER $MIN_READ_LEN $MIN_READ_QUAL
    echo -e "Copying files \n"
    echo "cp ${current_dir}/*.cov $COV_DIR"
    /bin/bash -c "cp ${current_dir}/*.cov ${COV_DIR}/"
    /bin/bash -c "cp ${current_dir}/*.sam ${POP_DIR}/"
    /bin/bash -c "cp ${current_dir}/*html qc"

    ## Create samtools stats
    current_sam="${current_dir}/${current}_trimmed.fastq_bismark_${ALIGNER}.sam"
    current_bam="${current_dir}/${current}.bam"

    echo "samtools view -S -b ${current_sam} > ${current_bam}"
    samtools view -S -b ${current_sam} > ${current_bam}

    echo "samtools sort ${current_bam} ${current_bam}.sorted"
    samtools sort ${current_bam} ${current_bam}.sorted

    echo "samtools index ${current_bam}.sorted.bam"
    samtools index ${current_bam}.sorted.bam

    samtools idxstats "${current_bam}.sorted.bam" > "${current_dir}/${current}.idxstats"
    cp "${current_dir}/${current}.idxstats" idxstats
done


############## Create final table
echo "-- Creating final table.."
    python ${FINAL_TABLE} ${TARGET_LIST} ${COV_DIR} ${READ_CUTOFF}
echo "-- .. done with table creation."

## Link the final table
FINAL_TABLE="ResultMethylListOnlyReferenceCpGs.csv"
ln -s ${COV_DIR}/${FINAL_TABLE}


############## Create lollipop plots
mkdir -p $COV_DIR/PLOTS
echo "-- Create lollipop plots for every target"
echo "Rscript --vanilla ${R_PLOTTING} ${COV_DIR} ${BS_SEQ} ${ALIGNER}"
Rscript --vanilla ${R_PLOTTING} ${COV_DIR} ${BS_SEQ} ${ALIGNER}
echo "-- .. done with plotting."
rm $COV_DIR/cg*


############## Find methyl subpopulations
echo "CMD subpopulations: ${METHYL_SUBPOP} -i ${POP_DIR} -p ${PERCENT_TARGET}"
bash ${METHYL_SUBPOP} -i ${POP_DIR} -p ${PERCENT_TARGET}



############## Copy the plots
echo "-- Copying the plots"
mkdir plots
cp ${COV_DIR}/PLOTS/* plots/


############## Convert all plots to pngs
cd plots
for file in `ls *.pdf`
do
    convert -density 180 ${file} -quality 100 "${file}.png"
done
cd ..


############## Link the subpopulation result
mkdir subpopulations
cp ${COV_DIR}/MethylSubpopulations/Output/* subpopulations/



############## Create final JSON file
echo "Creating final JSON file"
echo "${JSON_CREATOR} ${FINAL_TABLE} plots subpopulations qc idxstats"
python ${JSON_CREATOR} ${FINAL_TABLE} plots subpopulations qc idxstats




#################################################End of Worfklow#########################################
